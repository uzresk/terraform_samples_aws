name: Terraform PullRequest Apply
run-name: terraform apply by @${{ github.actor }}

on:
  issue_comment:
    types: [created]

env:
  TF_VERSION: 1.5.4
  TFLINT_VERSION: 0.50.3
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

jobs:
  terraform_apply:
    name: Terraform Apply
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, 'terraform apply')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout Repo
        if: github.event_name == 'issue_comment'
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.issue.number }}/merge

      - name: terraform plan xxxxのxxxxの部分からapplyを実行するディレクトリを取得する
        id: get-workdir-from-comment
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          PATTERN="^terraform apply (.+)$"
          if [[ $COMMENT_BODY =~ $PATTERN ]]; then
            workdir="${BASH_REMATCH[1]}" 
            echo "workdir: $workdir"
            echo "WORKDIR=$workdir" >> $GITHUB_ENV
            if [ ! -d $workdir ]; then
              echo "::error::Directory does not exist."
              echo "workdir_exists=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: 指定されたディレクトリが不正だったらエラー
        if: steps.get-workdir-from-comment.outputs.workdir_exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Failed: 不正なディレクトリが指定されています。'
            });
            process.exit(1);

      - name: 変更されたディレクトリの一覧からapplyを実行するディレクトリを取得する
        if: env.WORKDIR == ''
        id: get-workdir-from-diff
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
            });
            const diffFiles = response.data.map(file => file.filename);
            console.log("diff_files:", diffFiles.join("\n"));

            // ファイルパスからディレクトリの部分を取り出し、重複を排除
            const diffDirs = [...new Set(diffFiles.map(file => {
              // ファイルパスを'/'で分割してディレクトリ部分だけを取得（最後の要素はファイル名なので除外）
              const parts = file.split('/');
              parts.pop(); // ファイル名を取り除く
              return parts.join('/'); // ディレクトリパスを再構成
            }).filter(Boolean))]; // 空のエントリを排除

            console.log("diff_dirs:", diffDirs.join("\n"));

            if (diffDirs.length > 1) {
              console.log("Diff Directory が複数あります");
              core.setOutput("too_many_workdirs", "true");
            }
            workdir = diffDirs[0]
            console.log("workdir:", workdir)
            core.exportVariable("WORKDIR", workdir)

      - name: 複数のTerraformディレクトリがプルリクエスト内に入っていたらエラーとする
        if: steps.get-workdir-from-diff.outputs.too_many_workdirs == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Failed: プルリクエストに複数のTerraformディレクトリが存在します。'
            });
            process.exit(1);
          
      - name: PullRequestの番号を取得する 
        id: get-pr-number
        run: echo "pr_number=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"

      - name: PullRequestが承認されているかを確認する
        id: check-pr-status
        uses: actions/github-script@v5
        with:
          script: |
            const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
             });

            // レビューをレビュアーごとにグループ化
            const reviewsByReviewer = reviews.reduce((acc, review) => {
                if (!acc[review.user.login]) {
                    acc[review.user.login] = [];
                }
                acc[review.user.login].push(review);
                return acc;
            }, {});

            // 最新のステータスが取得できるようにソートする
            for (const reviewer in reviewsByReviewer) {
                reviewsByReviewer[reviewer].sort((a, b) => new Date(b.submitted_at) - new Date(a.submitted_at));
            }

            // APPROVEDが一人以上存在する＆CHANGES_REQUESTEDが存在しない場合、承認済み判定
            const noChangesRequested = Object.values(reviewsByReviewer).every(reviews => reviews[0].state !== 'CHANGES_REQUESTED');
            const atLeastOneApproved = Object.values(reviewsByReviewer).some(reviews => reviews[0].state === 'APPROVED');

            const approved = noChangesRequested && atLeastOneApproved;

            core.setOutput('approved', approved);

      - name: PullRequestが承認されていなかったらコメントに記載し終了
        if: steps.check-pr-status.outputs.approved == 'false'
        uses: actions/github-script@v5
        with:
          script: |
            await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Failed: プルリクエストが承認されていないのでterraform planが実行できません。'
            });

            process.exit(1);

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ env.WORKDIR }} 
        run: terraform init -no-color

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORKDIR }} 
        run: |
          echo "apply_output_path=$(pwd)/apply_output.txt" >> "$GITHUB_OUTPUT"
          terraform apply -auto-approve -no-color > apply_output.txt 2>&1

      # 
      - name: Apply済であることをPRのラベルにつけておく(terraform_applied)
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.get-pr-number.outputs.pr_number }}/labels" \
            -d '{"labels": ["terraform_applied"]}'


      - name: 結果をPullRequestのコメントに書き込む
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const applyOutput = fs.readFileSync('${{ steps.apply.outputs.apply_output_path }}', 'utf8');
            const commentBody = `
            Ran Apply for dir: \`${{ env.WORKDIR }}\`
            <details>

            <summary>Show Output</summary>

            \`\`\`
            ${applyOutput}
            \`\`\`

            </details>
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });